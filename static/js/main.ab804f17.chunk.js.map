{"version":3,"sources":["SettingsMode.tsx","ExerciseMode.tsx","App.tsx","index.tsx"],"names":["range","start","end","Array","fill","map","_","index","SettingsMode","props","className","defaultValue","totalReps","onChange","event","onTotalRepsChange","Number","target","value","toString","secsPerRep","onSecsPerRepChange","onClick","onExerciseStart","ExerciseMode","exercises","useState","currentExerciseIndex","setCurrentExerciseIndex","currentRep","setCurrentRep","millisecondsLeft","setMillisecondsLeft","isPaused","setIsPaused","updateCurrentRep","newCurrentRep","newCurrentExerciseIndex","length","updateCurrentExercise","Date","now","lastUpdate","setLastUpdate","useEffect","timeoutId","setTimeout","delta","newMillisecondsLeft","Math","max","updateMillisecondsLeft","clearTimeout","ceil","onExerciseStop","App","mode","setMode","anyNavigator","navigator","wakeLock","request","then","catch","setTotalReps","setSecsPerRep","getMode","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ab804f17.chunk.js","sourcesContent":["import React, { Dispatch, SetStateAction } from 'react';\nimport './SettingsMode.css';\n\ntype SettingsModeProps = {\n  totalReps: number,\n  onTotalRepsChange: Dispatch<SetStateAction<number>>,\n  secsPerRep: number,\n  onSecsPerRepChange: Dispatch<SetStateAction<number>>,\n  onExerciseStart: () => void,\n};\n\nfunction SettingsMode(props: SettingsModeProps) {\n  return (\n    <div className=\"SettingsMode flex-column\">\n      <p className=\"heading\">Repetitions:</p>\n      <select defaultValue={props.totalReps} onChange={(event) => props.onTotalRepsChange(Number(event.target.value))}>\n        {range(3, 21).map((value) => (\n          <option\n            key={value}\n            value={value.toString()}\n          >\n            {value}\n          </option>\n        ))}\n      </select>\n      <p className=\"heading\">Seconds:</p>\n      <select defaultValue={props.secsPerRep} onChange={(event) => props.onSecsPerRepChange(Number(event.target.value))}>\n        {range(1, 13).map((value) => (\n          <option\n            key={value}\n            value={value.toString()}\n          >\n            {value}\n          </option>\n        ))}\n      </select>\n      <button onClick={props.onExerciseStart}>Start</button>\n    </div>\n  );\n}\n\nfunction range(start: number, end: number) {\n  return new Array(end - start).fill(null).map((_, index) => start + index);\n}\n\nexport default SettingsMode;\n","import React, { useEffect, useState } from 'react';\n\ntype ExerciseModeProps = {\n  totalReps: number,\n  secsPerRep: number,\n  onExerciseStop: () => void,\n};\n\nfunction ExerciseMode(props: ExerciseModeProps) {\n  const exercises = [\n    \"Растяжение боковых мышц шеи\",\n    \"Разгибание шеи\",\n    \"Сгибание и разгибание шеи\",\n    \"Сгибание шеи\",\n    \"Растяжение шеи\",\n    \"Повороты шеи\",\n    \"Потягивание\",\n    \"Боковое сгибание\",\n    \"Повороты в сторону\",\n    \"Сгибание\",\n  ];\n\n  const [currentExerciseIndex, setCurrentExerciseIndex] = useState(0);\n  const [currentRep, setCurrentRep] = useState(1);\n  const [millisecondsLeft, setMillisecondsLeft] = useState(props.secsPerRep * 1000);\n\n  const [isPaused, setIsPaused] = useState(true);\n\n  const updateCurrentExercise = () => {\n    const newCurrentExerciseIndex = currentExerciseIndex + 1;\n        \n    if (newCurrentExerciseIndex === exercises.length) {\n      setIsPaused(true);\n      setCurrentExerciseIndex(0);\n    } else {\n      setCurrentExerciseIndex(newCurrentExerciseIndex);\n    }\n  };\n\n  const updateCurrentRep = () => {\n    const newCurrentRep = currentRep + 1;\n\n    if (newCurrentRep === props.totalReps + 1) {\n      setCurrentRep(1);\n      updateCurrentExercise();\n    } else {\n      setCurrentRep(newCurrentRep);\n    }\n  };\n\n  const updateMillisecondsLeft = (delta: number) => {\n    const newMillisecondsLeft = Math.max(0, millisecondsLeft - delta);\n\n    if (newMillisecondsLeft === 0) {\n      setMillisecondsLeft(props.secsPerRep * 1000);\n      updateCurrentRep();\n    } else {\n      setMillisecondsLeft(newMillisecondsLeft);\n    }\n  };\n\n  const [lastUpdate, setLastUpdate] = useState(Date.now());\n  useEffect(() => {\n    if (isPaused) {\n      return;\n    }\n\n    const precision = 100;\n    const timeoutId = setTimeout(() => {\n      setLastUpdate(Date.now());\n      updateMillisecondsLeft(precision);\n    }, precision - (Date.now() - lastUpdate));\n\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  });\n\n  const getPauseModeControls = () => (\n    <>\n      <button onClick={() => setIsPaused(false)}>Resume</button>\n      <button onClick={props.onExerciseStop}>Return to menu</button>\n    </>\n  );\n  \n  return (\n    <div className=\"SettingsMode flex-column\">\n      <p className=\"heading\">Exercise:</p>\n      <p className=\"heading\">{exercises[currentExerciseIndex]}</p>\n      <p className=\"heading\">Repetition:</p>\n      <p className=\"heading\">{currentRep} / {props.totalReps}</p>\n      <p className=\"heading\">Seconds left:</p>\n      <p className=\"heading\">{Math.ceil(millisecondsLeft / 1000)} / {props.secsPerRep}</p>\n      {isPaused ? getPauseModeControls() : <button onClick={() => setIsPaused(true)}>Pause</button>}\n    </div>\n  );\n}\n\nexport default ExerciseMode;\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\n\nimport SettingsMode from './SettingsMode';\nimport ExerciseMode from './ExerciseMode';\n\nfunction App() {\n  const [mode, setMode] = useState<'exercise' | 'settings' | 'no-wake-lock'>('settings');\n\n  useEffect(() => {\n    // Navigator types are hopelessly outdated\n    const anyNavigator = navigator as any;\n    if (!('wakeLock' in anyNavigator)) {\n      setMode('no-wake-lock');\n      return;\n    }\n\n    anyNavigator.wakeLock.request('screen')\n      .then(() => setMode('settings'))\n      .catch(() => setMode('no-wake-lock'));\n  }, []);\n\n  const [totalReps, setTotalReps] = useState(10);\n  const [secsPerRep, setSecsPerRep] = useState(5);\n\n  const getSettingsMode = () => (\n    <SettingsMode\n      totalReps={totalReps}\n      onTotalRepsChange={setTotalReps}\n      secsPerRep={secsPerRep}\n      onSecsPerRepChange={setSecsPerRep}\n      onExerciseStart={() => setMode('exercise')}\n    />\n  );\n\n  const getExerciseMode = () => (\n    <ExerciseMode\n      totalReps={totalReps}\n      secsPerRep={secsPerRep}\n      onExerciseStop={() => setMode('settings')}\n    />\n  );\n\n  const getMode = () => {\n    switch (mode) {\n      case 'settings': return getSettingsMode();\n      case 'exercise': return getExerciseMode();\n      case 'no-wake-lock': return <div className=\"flex-column\">Failed to aquire wake lock. Try to reload your page</div>;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {getMode()}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}